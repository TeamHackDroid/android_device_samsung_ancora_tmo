on early-init
    start ueventd

on init
    export PATH /sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard
    export SECONDARY_STORAGE /external_sd

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /usbdisk
    mkdir /external_sd
    mkdir /system
    mkdir /data
    mkdir /data/data
    mkdir /cache
    mount /tmp /tmp tmpfs

    write /sys/class/android_usb/android0/iSerial $ro.serialno

on boot
    mount debugfs /sys/kernel/debug /sys/kernel/debug

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

    write /sys/class/android_usb/android0/iManufacturer Samsung
    write /sys/class/android_usb/android0/iProduct $ro.product.model
    write /sys/class/android_usb/f_mass_storage/inquiry_string $ro.product.manufacturer

service ueventd /sbin/ueventd
    critical

service console /sbin/sh
    class core
    console
    disabled
    group log

on property:ro.debuggable=1
    start console

service recovery /sbin/recovery

# adbd is controlled by the persist.service.adb.enable system property
service adbd /sbin/adbd
    disabled

# Always start adbd on userdebug and eng builds
# In recovery, always run adbd as root.
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 04e8
    write /sys/class/android_usb/android0/idProduct 685e
    write /sys/class/android_usb/android0/functions mass_storage,adb
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop sys.usb.state mass_storage,adb
    setprop sys.usb.config mass_storage,adb
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    restart adbd

on property:persist.service.adb.enable=1
    start adbd

on property:persist.service.adb.enable=0
    stop adbd
